// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GameUpdate.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from GameUpdate.proto</summary>
public static partial class GameUpdateReflection {

  #region Descriptor
  /// <summary>File descriptor for GameUpdate.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static GameUpdateReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChBHYW1lVXBkYXRlLnByb3RvIhwKBFZlYzISCQoBeBgBIAEoAhIJCgF5GAIg",
          "ASgCIjIKBFF1YXQSCQoBeBgBIAEoAhIJCgF5GAIgASgCEgkKAXoYAyABKAIS",
          "CQoBdxgEIAEoAiJTCgtJbnB1dFVwZGF0ZRIhChJpbnB1dF9hbmFsb2dlX2F4",
          "aXMYASABKAsyBS5WZWMyEiEKEmNhbWVyYV9vcmllbnRhdGlvbhgCIAEoCzIF",
          "LlF1YXQiPQoJR2FtZVN0YXRlEhcKCHJvdGF0aW9uGAEgASgLMgUuVmVjMhIX",
          "Cghwb3NpdGlvbhgCIAEoCzIFLlZlYzIiZwoLR2FtZU1lc3NhZ2USJAoMaW5w",
          "dXRfdXBkYXRlGAEgASgLMgwuSW5wdXRVcGRhdGVIABIgCgpnYW1lX3N0YXRl",
          "GAIgASgLMgouR2FtZVN0YXRlSABCEAoOb25lb2ZfbWVzc2FnZXMiNwoKR2Ft",
          "ZVVwZGF0ZRINCgVldmVudBgBIAEoCRIaCgRkYXRhGAIgASgLMgwuR2FtZU1l",
          "c3NhZ2ViBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Vec2), global::Vec2.Parser, new[]{ "X", "Y" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Quat), global::Quat.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::InputUpdate), global::InputUpdate.Parser, new[]{ "InputAnalogeAxis", "CameraOrientation" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GameState), global::GameState.Parser, new[]{ "Rotation", "Position" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage), global::GameMessage.Parser, new[]{ "InputUpdate", "GameState" }, new[]{ "OneofMessages" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GameUpdate), global::GameUpdate.Parser, new[]{ "Event", "Data" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Vec2 : pb::IMessage<Vec2> {
  private static readonly pb::MessageParser<Vec2> _parser = new pb::MessageParser<Vec2>(() => new Vec2());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Vec2> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameUpdateReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Vec2() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Vec2(Vec2 other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Vec2 Clone() {
    return new Vec2(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Vec2);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Vec2 other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Vec2 other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class Quat : pb::IMessage<Quat> {
  private static readonly pb::MessageParser<Quat> _parser = new pb::MessageParser<Quat>(() => new Quat());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Quat> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameUpdateReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Quat() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Quat(Quat other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    w_ = other.w_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Quat Clone() {
    return new Quat(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 3;
  private float z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  /// <summary>Field number for the "w" field.</summary>
  public const int WFieldNumber = 4;
  private float w_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float W {
    get { return w_; }
    set {
      w_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Quat);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Quat other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(W, other.W)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
    if (W != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(W);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (Z != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Z);
    }
    if (W != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(W);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (Z != 0F) {
      size += 1 + 4;
    }
    if (W != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Quat other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    if (other.Z != 0F) {
      Z = other.Z;
    }
    if (other.W != 0F) {
      W = other.W;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
        case 29: {
          Z = input.ReadFloat();
          break;
        }
        case 37: {
          W = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class InputUpdate : pb::IMessage<InputUpdate> {
  private static readonly pb::MessageParser<InputUpdate> _parser = new pb::MessageParser<InputUpdate>(() => new InputUpdate());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<InputUpdate> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameUpdateReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InputUpdate() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InputUpdate(InputUpdate other) : this() {
    inputAnalogeAxis_ = other.inputAnalogeAxis_ != null ? other.inputAnalogeAxis_.Clone() : null;
    cameraOrientation_ = other.cameraOrientation_ != null ? other.cameraOrientation_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InputUpdate Clone() {
    return new InputUpdate(this);
  }

  /// <summary>Field number for the "input_analoge_axis" field.</summary>
  public const int InputAnalogeAxisFieldNumber = 1;
  private global::Vec2 inputAnalogeAxis_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vec2 InputAnalogeAxis {
    get { return inputAnalogeAxis_; }
    set {
      inputAnalogeAxis_ = value;
    }
  }

  /// <summary>Field number for the "camera_orientation" field.</summary>
  public const int CameraOrientationFieldNumber = 2;
  private global::Quat cameraOrientation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Quat CameraOrientation {
    get { return cameraOrientation_; }
    set {
      cameraOrientation_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as InputUpdate);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(InputUpdate other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(InputAnalogeAxis, other.InputAnalogeAxis)) return false;
    if (!object.Equals(CameraOrientation, other.CameraOrientation)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (inputAnalogeAxis_ != null) hash ^= InputAnalogeAxis.GetHashCode();
    if (cameraOrientation_ != null) hash ^= CameraOrientation.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (inputAnalogeAxis_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(InputAnalogeAxis);
    }
    if (cameraOrientation_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(CameraOrientation);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (inputAnalogeAxis_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(InputAnalogeAxis);
    }
    if (cameraOrientation_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CameraOrientation);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(InputUpdate other) {
    if (other == null) {
      return;
    }
    if (other.inputAnalogeAxis_ != null) {
      if (inputAnalogeAxis_ == null) {
        inputAnalogeAxis_ = new global::Vec2();
      }
      InputAnalogeAxis.MergeFrom(other.InputAnalogeAxis);
    }
    if (other.cameraOrientation_ != null) {
      if (cameraOrientation_ == null) {
        cameraOrientation_ = new global::Quat();
      }
      CameraOrientation.MergeFrom(other.CameraOrientation);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (inputAnalogeAxis_ == null) {
            inputAnalogeAxis_ = new global::Vec2();
          }
          input.ReadMessage(inputAnalogeAxis_);
          break;
        }
        case 18: {
          if (cameraOrientation_ == null) {
            cameraOrientation_ = new global::Quat();
          }
          input.ReadMessage(cameraOrientation_);
          break;
        }
      }
    }
  }

}

public sealed partial class GameState : pb::IMessage<GameState> {
  private static readonly pb::MessageParser<GameState> _parser = new pb::MessageParser<GameState>(() => new GameState());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GameState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameUpdateReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameState(GameState other) : this() {
    rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
    position_ = other.position_ != null ? other.position_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameState Clone() {
    return new GameState(this);
  }

  /// <summary>Field number for the "rotation" field.</summary>
  public const int RotationFieldNumber = 1;
  private global::Vec2 rotation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vec2 Rotation {
    get { return rotation_; }
    set {
      rotation_ = value;
    }
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 2;
  private global::Vec2 position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vec2 Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GameState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GameState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Rotation, other.Rotation)) return false;
    if (!object.Equals(Position, other.Position)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (rotation_ != null) hash ^= Rotation.GetHashCode();
    if (position_ != null) hash ^= Position.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (rotation_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Rotation);
    }
    if (position_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Position);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (rotation_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
    }
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GameState other) {
    if (other == null) {
      return;
    }
    if (other.rotation_ != null) {
      if (rotation_ == null) {
        rotation_ = new global::Vec2();
      }
      Rotation.MergeFrom(other.Rotation);
    }
    if (other.position_ != null) {
      if (position_ == null) {
        position_ = new global::Vec2();
      }
      Position.MergeFrom(other.Position);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (rotation_ == null) {
            rotation_ = new global::Vec2();
          }
          input.ReadMessage(rotation_);
          break;
        }
        case 18: {
          if (position_ == null) {
            position_ = new global::Vec2();
          }
          input.ReadMessage(position_);
          break;
        }
      }
    }
  }

}

public sealed partial class GameMessage : pb::IMessage<GameMessage> {
  private static readonly pb::MessageParser<GameMessage> _parser = new pb::MessageParser<GameMessage>(() => new GameMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GameMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameUpdateReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameMessage(GameMessage other) : this() {
    switch (other.OneofMessagesCase) {
      case OneofMessagesOneofCase.InputUpdate:
        InputUpdate = other.InputUpdate.Clone();
        break;
      case OneofMessagesOneofCase.GameState:
        GameState = other.GameState.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameMessage Clone() {
    return new GameMessage(this);
  }

  /// <summary>Field number for the "input_update" field.</summary>
  public const int InputUpdateFieldNumber = 1;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::InputUpdate InputUpdate {
    get { return oneofMessagesCase_ == OneofMessagesOneofCase.InputUpdate ? (global::InputUpdate) oneofMessages_ : null; }
    set {
      oneofMessages_ = value;
      oneofMessagesCase_ = value == null ? OneofMessagesOneofCase.None : OneofMessagesOneofCase.InputUpdate;
    }
  }

  /// <summary>Field number for the "game_state" field.</summary>
  public const int GameStateFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GameState GameState {
    get { return oneofMessagesCase_ == OneofMessagesOneofCase.GameState ? (global::GameState) oneofMessages_ : null; }
    set {
      oneofMessages_ = value;
      oneofMessagesCase_ = value == null ? OneofMessagesOneofCase.None : OneofMessagesOneofCase.GameState;
    }
  }

  private object oneofMessages_;
  /// <summary>Enum of possible cases for the "oneof_messages" oneof.</summary>
  public enum OneofMessagesOneofCase {
    None = 0,
    InputUpdate = 1,
    GameState = 2,
  }
  private OneofMessagesOneofCase oneofMessagesCase_ = OneofMessagesOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OneofMessagesOneofCase OneofMessagesCase {
    get { return oneofMessagesCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearOneofMessages() {
    oneofMessagesCase_ = OneofMessagesOneofCase.None;
    oneofMessages_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GameMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GameMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(InputUpdate, other.InputUpdate)) return false;
    if (!object.Equals(GameState, other.GameState)) return false;
    if (OneofMessagesCase != other.OneofMessagesCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (oneofMessagesCase_ == OneofMessagesOneofCase.InputUpdate) hash ^= InputUpdate.GetHashCode();
    if (oneofMessagesCase_ == OneofMessagesOneofCase.GameState) hash ^= GameState.GetHashCode();
    hash ^= (int) oneofMessagesCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (oneofMessagesCase_ == OneofMessagesOneofCase.InputUpdate) {
      output.WriteRawTag(10);
      output.WriteMessage(InputUpdate);
    }
    if (oneofMessagesCase_ == OneofMessagesOneofCase.GameState) {
      output.WriteRawTag(18);
      output.WriteMessage(GameState);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (oneofMessagesCase_ == OneofMessagesOneofCase.InputUpdate) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(InputUpdate);
    }
    if (oneofMessagesCase_ == OneofMessagesOneofCase.GameState) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameState);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GameMessage other) {
    if (other == null) {
      return;
    }
    switch (other.OneofMessagesCase) {
      case OneofMessagesOneofCase.InputUpdate:
        if (InputUpdate == null) {
          InputUpdate = new global::InputUpdate();
        }
        InputUpdate.MergeFrom(other.InputUpdate);
        break;
      case OneofMessagesOneofCase.GameState:
        if (GameState == null) {
          GameState = new global::GameState();
        }
        GameState.MergeFrom(other.GameState);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          global::InputUpdate subBuilder = new global::InputUpdate();
          if (oneofMessagesCase_ == OneofMessagesOneofCase.InputUpdate) {
            subBuilder.MergeFrom(InputUpdate);
          }
          input.ReadMessage(subBuilder);
          InputUpdate = subBuilder;
          break;
        }
        case 18: {
          global::GameState subBuilder = new global::GameState();
          if (oneofMessagesCase_ == OneofMessagesOneofCase.GameState) {
            subBuilder.MergeFrom(GameState);
          }
          input.ReadMessage(subBuilder);
          GameState = subBuilder;
          break;
        }
      }
    }
  }

}

public sealed partial class GameUpdate : pb::IMessage<GameUpdate> {
  private static readonly pb::MessageParser<GameUpdate> _parser = new pb::MessageParser<GameUpdate>(() => new GameUpdate());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GameUpdate> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameUpdateReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameUpdate() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameUpdate(GameUpdate other) : this() {
    event_ = other.event_;
    data_ = other.data_ != null ? other.data_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameUpdate Clone() {
    return new GameUpdate(this);
  }

  /// <summary>Field number for the "event" field.</summary>
  public const int EventFieldNumber = 1;
  private string event_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Event {
    get { return event_; }
    set {
      event_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 2;
  private global::GameMessage data_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GameMessage Data {
    get { return data_; }
    set {
      data_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GameUpdate);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GameUpdate other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Event != other.Event) return false;
    if (!object.Equals(Data, other.Data)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Event.Length != 0) hash ^= Event.GetHashCode();
    if (data_ != null) hash ^= Data.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Event.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Event);
    }
    if (data_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Data);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Event.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Event);
    }
    if (data_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GameUpdate other) {
    if (other == null) {
      return;
    }
    if (other.Event.Length != 0) {
      Event = other.Event;
    }
    if (other.data_ != null) {
      if (data_ == null) {
        data_ = new global::GameMessage();
      }
      Data.MergeFrom(other.Data);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Event = input.ReadString();
          break;
        }
        case 18: {
          if (data_ == null) {
            data_ = new global::GameMessage();
          }
          input.ReadMessage(data_);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
